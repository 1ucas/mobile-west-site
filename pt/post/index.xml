<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Mobile West</title><link>https://www.mobilewest.com.br/pt/post/</link><description>Recent content in Posts on Mobile West</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Thu, 24 Mar 2022 15:49:45 -0300</lastBuildDate><atom:link href="https://www.mobilewest.com.br/pt/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Guia de Estudos - Mobile 2022</title><link>https://www.mobilewest.com.br/pt/post/career/mobile-study-guide-2022/</link><pubDate>Thu, 24 Mar 2022 15:49:45 -0300</pubDate><guid>https://www.mobilewest.com.br/pt/post/career/mobile-study-guide-2022/</guid><description>
&lt;h2 id="crie-rotina">Crie Rotina&lt;/h2>
&lt;p>Muitas pessoas me perguntam: &amp;quot;Lucas, o que você me recomenda estudar para melhorar minhas habilidades?&lt;/p>
&lt;p>A minha primeira resposta normalmente também é uma pergunta:&lt;/p>
&lt;blockquote>
&lt;p>O que você gosta de estudar?&lt;/p>
&lt;/blockquote>
&lt;p>Mais importante do que estudar um assunto específico devemos focar na cadência do aprendizado. &lt;br>
Manter a cadência nos estudos é o que vai aumentar o seu nível de maturidade em programação, independente da linguagem ou framework. Mas por que isso? &lt;br>
Porque cadência envolve persistência. Envolve errar, envolve não conseguir prosseguir. Mas também envolve superação e aprendizado real.&lt;/p>
&lt;p>Quando não se tem persistência em algo, o ganho é muito superficial. &lt;br>
E se estudar já é um hábito que demanda esforço, estudar algo que você não tem interesse demanda um esforço muito maior.&lt;/p>
&lt;p>Além disso, como já diria o Gato de Cheshire no clássico &amp;quot;Alice no País das Maravilhas&amp;quot;:&lt;/p>
&lt;p>&lt;img src="https://www.mobilewest.com.br/images/nao-sabe-onde-ir-pt.png" alt="Gato de Cheshire">&lt;/p>
&lt;p>Então se você não tem um plano de estudos, segue aqui o meu primeiro conselho de amigo:&lt;/p>
&lt;blockquote>
&lt;p>Esqueça o plano. Crie uma rotina de estudos!&lt;/p>
&lt;/blockquote>
&lt;p>Não pense demais. Apenas estude.&lt;/p>
&lt;p>Leia artigos, blogs ou procure o Twitter de outros desenvolvedores Senior. Seja o que for. &lt;br>
Criar esse hábito será o maior benefício para seu crescimento profissional.&lt;/p>
&lt;p>Mas se você já tem uma rotina de estudos e gostaria de ajuda para organizá-la ou priorizar temas mais relevantes, vem que eu te ajudo.&lt;/p>
&lt;h2 id="guia-de-estudos-2022">Guia de Estudos 2022&lt;/h2>
&lt;p>Aqui vai um pequeno adendo, os assuntos a seguir tem um viés de complexidade um pouco maior. Então caso você esteja aprendendo agora alguma das Stacks, eu recomendo solidificar a sua base para depois buscar conhecimentos específicos.&lt;/p>
&lt;h3 id="programação-assíncrona">Programação Assíncrona&lt;/h3>
&lt;p>Talvez um dos tópicos mais complexos da programação seja justamente programação assíncrona. &lt;br>
A quantidade de caminhos que o código pode tomar se torna infinitamente maior quando não conseguimos predizer quando uma função irá retornar algum valor ou quando um estado será alterado na tela. &lt;br>
Mas apesar de ser um tema complexo, muita coisa mudou com o passar do tempo.
E hoje temos várias estruturas auxiliares que nos ajudam com essa tarefa.&lt;/p>
&lt;p>Em Android, se você ainda não começou os estudos de Coroutines, lembre-se que este é o padrão mais utilizados em novos projetos. Inclusive, nos exemplos de documentações Android, o foco em Coroutines predominante. &lt;br>
Lembro também que AsyncTask se tornou &lt;code>deprecated&lt;/code> na API 31 do Android, então o recomendado é começar a avaliar a migração desse código o quanto antes.&lt;/p>
&lt;p>Já em iOS, a introdução de conceitos como &lt;code>Actors&lt;/code> e &lt;code>Tasks&lt;/code> mudou completamente a forma como interagíamos com código assíncrono. Saem de cena as famosas &lt;code>completionHandlers&lt;/code> para entrarem as novas &lt;code>keywords&lt;/code>, &lt;code>async&lt;/code> e &lt;code>await&lt;/code>.
E essa mudança é muito mais profunda do que parece. Inclusive o próprio conceito de &lt;code>Thread&lt;/code> é redefinido quando passamos a olhar para a forma que as &lt;code>Tasks&lt;/code> interagem entre si. &lt;br>
Sugestão de leitura: &lt;a href="https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html">Concurrency&lt;/a>&lt;/p>
&lt;h3 id="interfaces-declarativas">Interfaces Declarativas&lt;/h3>
&lt;p>Não há dúvidas, interfaces declarativas tem sido um Hot Topic desse ano. &lt;br>
Tanto o Jetpack Compose no Android quanto o SwiftUI no iOS vieram para ficar. &lt;br>
Nem tudo são flores (mas quando isso é verdade?). Ambas bibliotecas precisam de um maior polimento e correção de bugs. &lt;br>
Mas não se deixe influenciar pelo desespero e pessimismo de alguns desenvolvedores da comunidade. Afinal de contas, por serem novas abordagens e novas implementações, estamos todos aprendendo.&lt;/p>
&lt;p>&lt;em>Ponto de atenção:&lt;/em> em ambos os casos a mudança na construção de interfaces não é apenas uma mudança de framework. O paradigma de se escrever interfaces declarativas é &lt;strong>totalmente&lt;/strong> diferente do que estamos acostumados. &lt;br>
Navegações, exibição de alertas, referência de Views internas... Nada disso é igual!! Começar a usar esses novos frameworks é uma verdadeira lição de humildade, onde aprende-se tudo (quase) do zero.&lt;/p>
&lt;h3 id="modularização">Modularização&lt;/h3>
&lt;p>Como falar de um guia de estudos sem falar de modularização? Praticamente em todos eventos que vamos tem uma &amp;quot;Talk&amp;quot; sobre modularização de aplicativos.&lt;/p>
&lt;p>Mas por que isso é tão importante? Por dois simples motivos, reduzir a carga mental de cada time e habilitar entregas mais rápidas de forma independente entre as equipes.&lt;/p>
&lt;p>Contudo, modularização tem seus riscos. Simplesmente começar a criar subprojetos e referenciá-los dentro de um projeto principal não é o suficiente para garantir o crescimento saudável dos módulos de sua aplicação. &lt;br>
É preciso estudar como quebrar os domínios e features de seu App, de forma que os times tenham plena autonomia nos módulos e funcionalidades em que estão trabalhando.&lt;/p>
&lt;p>Esse não é um trabalho só de engenharia, mas também de processo e pessoas. &lt;br>
É necessário se planejar para reduzir a sobreposição e duplicação de funcionalidades. &lt;br>
É necessário criar os canais de comunicação corretos entre as pessoas. &lt;br>
É necessário orquestrar a entrega de todos os times, pensando que somente um pacote final irá ser entregue ao cliente.&lt;/p>
&lt;p>Para isso, tanto o processo quanto a gestão de pessoas de sua empresa devem se preparar para absorver as demandas e tarefas que esses desafios impõe.&lt;/p>
&lt;h3 id="vrar">VR/AR&lt;/h3>
&lt;p>Facebook (agora Meta), Apple, Google e Microsoft. Já ouviu falar dessas empresas?&lt;/p>
&lt;p>Apesar de ainda ser algo pouco presente em nosso cotidiano, todas elas estão ativamente trabalhando em tecnologias e produtos voltados para o mercado de Realidade Aumentada e Realidade Virtual.&lt;/p>
&lt;p>Esse assunto é onde o futuro realmente está. &lt;br>
Então se você já está confortável com seu nível de conhecimento atual e quer se preparar para o futuro, invista seu tempo em VR/AR.&lt;/p>
&lt;h3 id="bonus-server-driven-ui">Bonus: Server-Driven UI&lt;/h3>
&lt;p>Como trazer valor para o negócio, com o menor custo possível? Essa é pergunta de milhão de dólares (ou mais). &lt;br>
Server-Driven UI é um forma de se pensar e estruturar a sua aplicação para que ela responda dinamicamente à resposta do servidor.&lt;/p>
&lt;p>Mas isso não é a mesma coisa que BFF? Não.&lt;/p>
&lt;p>Backend for Frontend é uma estratégia que visa focar na experiência do usuário, separando uma interface de backend para cada frontend. &lt;br>
Essa estratégia pode ser implementada de forma clássica, pensando somente nos dados e formatação dos mesmos, ou pode ser implementada trazendo também para o frontend a estrutura que o mesmo deve exibir.&lt;/p>
&lt;p>Quando o Backend começa a pensar não somente nos dados, mas também na forma de apresentação dos mesmos na tela, temos o que chamamos de Server-Driven UI.&lt;/p>
&lt;ul>
&lt;li>Um exemplo prático disso seria apresentar os números de telefone do usuário. Essa informação poderia ser exibida como:
&lt;ul>
&lt;li>uma lista vertical&lt;/li>
&lt;li>um campo de texto único, separando os número por vírgula&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Ter essa flexibilidade de alteração na estrutura não é algo trivial. &lt;br>
Normalmente um dos pré-requisitos é ter um Design System robusto e completo. &lt;br>
Além disso, é fundamental também montar uma equipe plenamente capaz de construir uma biblioteca performática e consistente, que consiga gerar dinamicamente elementos na tela do celular com base na resposta do servidor.&lt;/p>
&lt;h2 id="e-aí-quer-aprender-mais">E aí? Quer aprender mais?&lt;/h2>
&lt;p>Gostou dos tópicos a serem abordados? &lt;em>Vem comigo!&lt;/em> &lt;br>
Mensalmente vou trazer as novidades e recomendações de estudo sobre cada um desses temas em sua respectiva tecnologia.&lt;/p>
&lt;p>E para não perder nenhuma das publicações, só me seguir no &lt;a href="https://www.linkedin.com/in/lucas-ramos-maciel">Linkedin&lt;/a>!&lt;/p></description></item><item><title>O perigo do Clean Code - PT1</title><link>https://www.mobilewest.com.br/pt/post/clean-code/clean-code-ugly1/</link><pubDate>Tue, 03 Aug 2021 22:05:24 -0300</pubDate><guid>https://www.mobilewest.com.br/pt/post/clean-code/clean-code-ugly1/</guid><description>
&lt;p>Estou relendo o famoso livro Clean Code. Afinal de contas, que programador pode se dar ao luxo de não ler?&lt;br>
E confesso que da primeira vez que li os conceitos fiquei maravilhado. Queria aplicar tudo que lia.&lt;/p>
&lt;p>Mas como programador pragmático que sou, resolvi repensar e reaplicar um pouco desses conceitos na vida real.&lt;br>
Então separei uma série de artigos com alguns temas deveras controversos e cenários reais que tenho encontrado em minha vida de programador que me fazem pensar o quanto estamos apenas absorvendo roboticamente regras sem realmente parar e pensar realmente nos conceitos por trás.&lt;/p>
&lt;p>Nesta primeira parte, gostaria de compartilhar com vocês um ponto sobre &amp;quot;Constantes&amp;quot;.&lt;/p>
&lt;h3 id="magic-numbers-e-textos-fixos">Magic Numbers e Textos Fixos&lt;/h3>
&lt;p>Após estudar um pouco sobre Clean Code o mais comum é encontrarmos código do tipo:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">linha&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="nc">Constants&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="kd">static&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">containerViewHeight&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">50.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="kd">static&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">parentViewHeight&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">100.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="kd">static&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">parentTitle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Potato&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="kd">static&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">firstSectionTitle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Mashed Potatos&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">linha&lt;/span> &lt;span class="mi">70&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">parentContentView&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CustomView&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="n">title&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">parentTitle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="p">.......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">firstSectionView&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CustomView&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="n">title&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">firstSectionTitle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="p">.......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">linha&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">setupConstraints&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> &lt;span class="n">parentContentView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">heightAnchor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">constraint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">equalToConstant&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Constants&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">parentViewHeight&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">isActive&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>WTH???&lt;br>
Pensem como o pobre coitado que vai fazer a revisão de código.&lt;br>
Você começa lendo algumas variáveis fixas no código, que não fazem sentido algum neste momento, depois vai lendo outras parte do código....&lt;br>
E quando você menos espera, 80 linhas abaixo, você encontra o uso de uma dessas variáveis. Em nenhum outro lugar faz sentido essa variávei existir, ser manipulada ou qualquer outra coisa.&lt;/p>
&lt;p>Qual o sentido disso?&lt;br>
Estamos dizendo que o &lt;code>height&lt;/code> da &lt;code>parentContentView&lt;/code> é igual a &lt;code>parentViewHeight&lt;/code> ?&lt;br>
E também estamos dizendo que o &lt;code>title&lt;/code> da &lt;code>parentContentView&lt;/code> é igual a &lt;code>parentTitle&lt;/code>?&lt;/p>
&lt;p>Ou seja, não ganhamos NADA em semântica. Não ganhamos NADA em reuso.&lt;br>
Então eu te pergunto. Qual o ganho real dessa &amp;quot;regra&amp;quot; do Clean Code em nosso exemplo?&lt;/p>
&lt;h3 id="desculpas-esfarrapadas">Desculpas esfarrapadas&lt;/h3>
&lt;p>Vamos começar com as justificativas prontas, porém frias (iguais as coxinhas da cantina de sua faculdade) que qualquer um daria ao ser questionado.&lt;/p>
&lt;ol>
&lt;li>&lt;em>Não podemos deixar Magic Numbers no código, por isso eu abstraí as alturas.&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>Por que não? Que regra de negócio pode mudar o tamanho da View, quando &amp;quot;tamanho de View&amp;quot; pode mudar o sentido para qualquer outra coisa? Sem falar de Clean Code, justifique.&lt;/p>
&lt;ol start="2">
&lt;li>&lt;em>Mas e se o tamanho da View mudar, eu vou ter que ficar caçando a variável no código?&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>Socorro! Você é um programador que conhece a tecnologia? Você conhece a arquitetura que você está trabalhando? Então você sabe EXATAMENTE onde aquela propriedade foi configurada.&lt;/p>
&lt;ol start="3">
&lt;li>&lt;em>Mas e se alguém configurou em outro lugar diferente do padrão definido?&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>A pessoa está errada! Simples assim. O código dela não deveria ter subido / aprovado. Provavelmente ela não foi instruída corretamente ou simplesmente fez de má fé.&lt;br>
Não existe livro de programação algum, em inglês ou português que consegue resolver caráter.&lt;/p>
&lt;p>Mas você, cavaleiro do código limpo, defensor das boas práticas vai lá e tem a brilhante ideia de dificultar a leitura para todo mundo por conta de um &amp;quot;e se&amp;quot;?&lt;/p>
&lt;!-- Vou te fazer um desejo, porque você é um verdadeiro gênio. -->
&lt;h3 id="então-essa-regra-não-presta">Então essa regra não presta?&lt;/h3>
&lt;p>Vamos ser simples e diretos. Claro que presta!&lt;br>
É um regra super útil...... SE usada conforme o princípio esperado.&lt;/p>
&lt;p>Voltando aos exemplos:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="k">object&lt;/span> &lt;span class="nc">ErrorConfiguration&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">MaxRetries&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">LastRetryMessage&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Last Message&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="o">....&lt;/span> &lt;span class="n">em&lt;/span> &lt;span class="n">outro&lt;/span> &lt;span class="n">lugar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">tryAgain&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">currentRetry&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="n">ErrorConfiguration&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MaxRetries&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="c1">// (executa de novo)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">currentRetry&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ErrorConfiguration&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MaxRetries&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="c1">// (executa de novo e muda a frase do erro)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="c1">// (esconde o botão)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Quando pensamos em variáveis dessa natureza fica óbvio que uma organização de constantes faz sentido.&lt;br>
Nesse contexto estamos dando sentido a aquela variável.&lt;/p>
&lt;p>Quem está lendo a função não precisa parar e se perguntar o motivo do número 3, o sentido está no próprio nome.&lt;br>
Assim o código fica muito mais legível.
E como a mudança de quantidade máxima de retentativas permitidas é uma regra de negócio, temos o ganho de alterar apenas uma vez no código e refletir para todos os lugares que usam essa regra.&lt;/p>
&lt;h3 id="recapitulando">Recapitulando&lt;/h3>
&lt;p>O &lt;del>Golpe&lt;/del> Clean Code está aí, usa quem quer. Mas se for usar, pense nos conceitos, na motivação e nos reais ganhos de adotar cada uma das práticas defendidas.&lt;/p>
&lt;h3 id="próximos-passos">Próximos Passos&lt;/h3>
&lt;p>Na próxima parte dessa série falaremos de (.....) não sei ainda. Como disse, estou relendo o livro agora.&lt;br>
Mas assim que souber aviso vocês.&lt;br>
; )&lt;/p></description></item></channel></rss>