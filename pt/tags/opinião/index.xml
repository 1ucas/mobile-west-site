<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>opinião on Mobile West</title><link>https://www.mobilewest.com.br/pt/tags/opini%C3%A3o/</link><description>Recent content in opinião on Mobile West</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Tue, 03 Aug 2021 22:05:24 -0300</lastBuildDate><atom:link href="https://www.mobilewest.com.br/pt/tags/opini%C3%A3o/index.xml" rel="self" type="application/rss+xml"/><item><title>O perigo do Clean Code - PT1</title><link>https://www.mobilewest.com.br/pt/post/clean-code/clean-code-ugly1/</link><pubDate>Tue, 03 Aug 2021 22:05:24 -0300</pubDate><guid>https://www.mobilewest.com.br/pt/post/clean-code/clean-code-ugly1/</guid><description>
&lt;p>Estou relendo o famoso livro Clean Code. Afinal de contas, que programador pode se dar ao luxo de não ler?&lt;br>
E confesso que da primeira vez que li os conceitos fiquei maravilhado. Queria aplicar tudo que lia.&lt;/p>
&lt;p>Mas como programador pragmático que sou, resolvi repensar e reaplicar um pouco desses conceitos na vida real.&lt;br>
Então separei uma série de artigos com alguns temas deveras controversos e cenários reais que tenho encontrado em minha vida de programador que me fazem pensar o quanto estamos apenas absorvendo roboticamente regras sem realmente parar e pensar realmente nos conceitos por trás.&lt;/p>
&lt;p>Nesta primeira parte, gostaria de compartilhar com vocês um ponto sobre &amp;quot;Constantes&amp;quot;.&lt;/p>
&lt;h3 id="magic-numbers-e-textos-fixos">Magic Numbers e Textos Fixos&lt;/h3>
&lt;p>Após estudar um pouco como sobre Clean Code o mais comum é encontrarmos código do tipo:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">linha&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="nc">Constants&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">containerViewHeight&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">50.0&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">parentViewHeight&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">100.0&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">parentTitle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Potato&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">firstSectionTitle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Mashed Potatos&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">linha&lt;/span> &lt;span class="mi">70&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">parentContentView&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CustomView&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">parentTitle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">.......&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">firstSectionView&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CustomView&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">firstSectionTitle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">.......&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">linha&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">setupConstraints&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">parentContentView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">heightAnchor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">constraint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">equalToConstant&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Constants&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">parentViewHeight&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">isActive&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>WTH???&lt;br>
Pensem como o pobre coitado que vai fazer a revisão de código.&lt;br>
Você começa lendo algumas variáveis fixas no código, que não fazem sentido algum neste momento, depois vai lendo outras parte do código....&lt;br>
E quando você menos espera, 80 linhas abaixo, você encontra o uso de uma dessas variáveis. Em nenhum outro lugar faz sentido essa variávei existir, ser manipulada ou qualquer outra coisa.&lt;/p>
&lt;p>Qual o sentido disso?&lt;br>
Estamos dizendo que a &lt;code>height&lt;/code> da &lt;code>parentContentView&lt;/code> é igual a &lt;code>parentViewHeight&lt;/code> ?&lt;br>
E também estamos dizendo que o &lt;code>title&lt;/code> da &lt;code>parentContentView&lt;/code> é igual a &lt;code>parentTitle&lt;/code>?&lt;/p>
&lt;p>Ou seja, não ganhamos NADA em semântica. Não ganhamos NADA em reuso.&lt;br>
Então eu te pergunto. Qual o ganho real dessa &amp;quot;regra&amp;quot; do Clean Code em nosso exemplo?&lt;/p>
&lt;h3 id="desculpas-esfarrapadas">Desculpas esfarrapadas&lt;/h3>
&lt;p>Vamos começar com as justificativas prontas, porém frias (iguais as coxinhas da cantina de sua faculdade) que qualquer um daria ao ser questionada.&lt;/p>
&lt;ol>
&lt;li>&lt;em>Não podemos deixar Magic Numbers no código, por isso eu abstraí as alturas.&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>Por que não, oh corno? Que regra de negócio pode mudar o tamanho da View, quando &amp;quot;tamanho de View&amp;quot; pode mudar o sentido para qualquer outra coisa? Sem falar de Clean Code, justifique.&lt;/p>
&lt;ol start="2">
&lt;li>&lt;em>Mas e se o tamanho da View mudar, eu vou ter que ficar caçando a variável no código?&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>Socorro! Você é um programador que conhece a tecnologia? Você conhece a arquitetura que você está trabalhando? Então você sabe EXATAMENTE onde aquela propriedade foi configurada.&lt;/p>
&lt;ol start="3">
&lt;li>&lt;em>Mas e se alguém configurou em outro lugar diferente do padrão definido?&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>A pessoa está errada! Simples assim. O código dela não deveria ter subido / aprovado. Provavelmente ela não foi instruída corretamente ou simplesmente fez de má fé.&lt;br>
Não existe livro de programação algum, em inglês ou português que consegue resolver caráter.\&lt;/p>
&lt;p>Mas você, cavaleiro do código limpo, defensor das boas práticas vai lá e tem a brilhante ideia de dificultar a leitura para todo mundo por conta de um &amp;quot;e se&amp;quot;?&lt;br>
Vou te fazer um desejo, porque você é um verdadeiro gênio.&lt;/p>
&lt;h3 id="então-essa-regra-não-presta">Então essa Regra não Presta?&lt;/h3>
&lt;p>Vamos ser simples e diretos. Claro que presta!&lt;br>
É um regra super útil...... SE usada conforme o princípio esperado.&lt;/p>
&lt;p>Voltando aos exemplos:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">object&lt;/span> &lt;span class="nc">ErrorConfiguration&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">MaxRetries&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">3&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">LastRetryMessage&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Last Message&amp;#34;&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">....&lt;/span> &lt;span class="n">em&lt;/span> &lt;span class="n">outro&lt;/span> &lt;span class="n">lugar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="nf">tryAgain&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">currentRetry&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="n">ErrorConfiguration&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MaxRetries&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="c1">// (executa de novo)
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">currentRetry&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ErrorConfiguration&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MaxRetries&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">// (executa de novo e muda a frase do erro)
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1">// (esconde o botão)
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Quando pensamos em variáveis dessa natureza fica óbvio que uma organização de constantes faz sentido.&lt;br>
Nesse contexto estamos dando sentido a aquela variável.&lt;br>
Quem está lendo a função não precisa parar e se perguntar o motivo do número 3, o sentido está no próprio nome. Assim o código fica muito mais legível.&lt;br>
E como a mudança de quantidade máxima de retentativas permitidas é uma regra de negócio, temos o ganho de alterar apenas uma vez no código e refletir para todos os lugares que usam essa regra.&lt;/p>
&lt;h3 id="recapitulando">Recapitulando&lt;/h3>
&lt;p>O &lt;del>Golpe&lt;/del> Clean Code está aí, usa quem quer. Mas se for usar, pense nos conceitos, na motivação e nos reais ganhos de adotar cada uma das práticas defendidas.&lt;/p>
&lt;h3 id="próximos-passos">Próximos Passos&lt;/h3>
&lt;p>Na próxima parte dessa série falaremos de (.....) não sei ainda. Como disse, estou relendo o livro agora.&lt;br>
Mas assim que souber aviso vocês.&lt;br>
; )&lt;/p></description></item></channel></rss>